{"version":3,"file":"static/js/595.838fdbac.chunk.js","mappings":"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","sources":["pages/List/ListHeader/ListHeader.jsx","pages/List/ListItem/ListItem.jsx","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","pages/List/PopupContact/PopupContact.jsx","js/const.js","pages/List/ListBtnSection/Search/Search.jsx","pages/List/ListBtnSection/ListBtnSection.jsx","pages/List/InlineContact/InlineContact.jsx","pages/List/List.jsx"],"sourcesContent":["import \"./ListHeader.css\";\r\n\r\nexport default function ListHeader({ onCheck, checkAll }) {\r\n  return (\r\n    <div className=\"ListHeader\">\r\n      <div className=\"ListHeader-row\">\r\n        <div className=\"ListHeader-item\">\r\n          <label className=\"checkbox\">\r\n            <input\r\n              name=\"checkAll\"\r\n              type=\"checkbox\"\r\n              checked={checkAll}\r\n              onChange={onCheck}\r\n            />\r\n            <span></span>\r\n          </label>\r\n        </div>\r\n        <div className=\"ListHeader-item row-item-2 row-item\">NAME</div>\r\n        <div className=\"ListHeader-item row-item-3 row-item\">EMAIL</div>\r\n        <div className=\"ListHeader-item row-item-4 row-item\">PHONE</div>\r\n        <div className=\"ListHeader-item row-item-5 row-item\">PROFESSION</div>\r\n        <div className=\"ListHeader-item row-item-6 row-item\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./ListItem.css\";\r\nimport { onDelete } from \"../../../js/utils\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMinus, faUserPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useContext } from \"react\";\r\nimport { SettingsContext } from \"../../../context/context\";\r\n\r\nexport default function ListItem({\r\n  id,\r\n  contact,\r\n  contacts,\r\n  setContacts,\r\n  setNewContact,\r\n  checkedIdArr,\r\n  onPopupContactEdit,\r\n  onInlineContactEdit,\r\n  onCheck,\r\n}) {\r\n  const { cardViewState, inlineEditState } = useContext(SettingsContext);\r\n\r\n  const ListItemStyleHandler = () => {\r\n    if (cardViewState) {\r\n      return \"ListItem-card\";\r\n    } else {\r\n      if (checkedIdArr.includes(id)) {\r\n        return \"ListItem-row itemRowInlineStyle\";\r\n      } else {\r\n        return \"ListItem-row\";\r\n      }\r\n    }\r\n  };\r\n\r\n  const editItemHandler = () => {\r\n    setNewContact({\r\n      id: contact.id,\r\n      firstName: contact.firstName,\r\n      lastName: contact.lastName,\r\n      phone: contact.phone,\r\n      email: contact.email,\r\n      profession: contact.profession,\r\n    });\r\n    if (!inlineEditState) {\r\n      onPopupContactEdit(contact);\r\n    } else {\r\n      if (!cardViewState) {\r\n        onInlineContactEdit(contact);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={ListItemStyleHandler()}>\r\n      <div className={!cardViewState ? \"ListItem-item\" : \"ListItem-card-item\"}>\r\n        <label className=\"checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            name=\"checkItem\"\r\n            checked={checkedIdArr.includes(id)}\r\n            onChange={(e) => {\r\n              onCheck(e, id);\r\n            }}\r\n          />\r\n          <span></span>\r\n        </label>\r\n      </div>\r\n\r\n      <div\r\n        className={\r\n          !cardViewState\r\n            ? \"ListItem-item row-item-2 row-item\"\r\n            : \"ListItem-card-item\"\r\n        }\r\n      >\r\n        {contact.avatar}\r\n        {contact.firstName} {contact.lastName}\r\n      </div>\r\n      <div\r\n        className={\r\n          !cardViewState\r\n            ? \"ListItem-item row-item-3 row-item\"\r\n            : \"ListItem-card-item\"\r\n        }\r\n      >\r\n        {cardViewState ? (\r\n          <p className=\"ListItem-carView-subtitle\">Email</p>\r\n        ) : null}\r\n        <a href={`mailto:${contact.email}`}>{contact.email}</a>\r\n      </div>\r\n      <div\r\n        className={\r\n          !cardViewState\r\n            ? \"ListItem-item row-item-4 row-item\"\r\n            : \"ListItem-card-item\"\r\n        }\r\n      >\r\n        {cardViewState ? (\r\n          <p className=\"ListItem-carView-subtitle\">Phone</p>\r\n        ) : null}\r\n        <a href={`tel:${contact.phone}`}>{contact.phone} </a>\r\n      </div>\r\n      <div\r\n        className={\r\n          !cardViewState\r\n            ? \"ListItem-item row-item-5 row-item\"\r\n            : \"ListItem-card-item\"\r\n        }\r\n      >\r\n        {cardViewState ? (\r\n          <p className=\"ListItem-carView-subtitle\">Profession</p>\r\n        ) : null}\r\n        {contact.profession}\r\n      </div>\r\n      <div\r\n        className={\r\n          !cardViewState\r\n            ? \"ListItem-item row-item-6 row-item\"\r\n            : \"ListItem-card-item\"\r\n        }\r\n      >\r\n        <div className=\"ListItem-icon-group\">\r\n          <FontAwesomeIcon icon={faUserPen} onClick={editItemHandler} />\r\n          <FontAwesomeIcon\r\n            icon={faMinus}\r\n            onClick={() => {\r\n              onDelete(contact, contacts, setContacts);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","import \"./PopupContact.css\";\r\nimport {listItemConfirmButtonHandler} from \"../../../js/utils\";\r\n\r\nimport {useState} from \"react\";\r\n\r\nexport default function PopupContact({\r\n                                       title,\r\n                                       button,\r\n                                       contact,\r\n                                       contacts,\r\n                                       setContacts,\r\n                                       setPopupContactStatus,\r\n                                     }) {\r\n  const [editedContact, setEditedContact] = useState(contact)\r\n  const [newContact, setNewContact] = useState(contact)\r\n\r\n  return (\r\n    <div\r\n      className=\"PopupContact-mask\"\r\n      onClick={(e) => {\r\n        if (e.target.className === \"PopupContact-mask\") {\r\n          setPopupContactStatus(null);\r\n        }\r\n      }}\r\n    >\r\n      <form className=\"PopupContact-container swal2-show\">\r\n        <h1 className=\"PopupContact-title\">{title}</h1>\r\n        <label className=\"PopupContact-item\">\r\n          <h3>First Name</h3>\r\n          <input\r\n            className=\"PopupContact-input\"\r\n            type=\"text\"\r\n            value={button === \"Add\" ? newContact.firstName : editedContact.firstName}\r\n            onChange={(e) => {\r\n              if (button === \"Add\") {\r\n                setNewContact({...newContact, firstName: e.target.value});\r\n              } else {\r\n                setEditedContact({...editedContact, firstName: e.target.value});\r\n              }\r\n            }}\r\n          />\r\n        </label>\r\n        <label className=\"PopupContact-item\">\r\n          <h3>Last Name</h3>\r\n          <input\r\n            className=\"PopupContact-input\"\r\n            type=\"text\"\r\n            value={button === \"Add\" ? newContact.lastName : editedContact.lastName}\r\n            onChange={(e) => {\r\n              if (button === \"Add\") {\r\n                setNewContact({...newContact, lastName: e.target.value});\r\n              } else {\r\n                setEditedContact({...editedContact, lastName: e.target.value});\r\n              }\r\n            }}\r\n          />\r\n        </label>\r\n        <label className=\"PopupContact-item\">\r\n          <h3>Email</h3>\r\n          <input\r\n            className=\"PopupContact-input\"\r\n            type=\"text\"\r\n            value={button === \"Add\" ? newContact.email : editedContact.email}\r\n            onChange={(e) => {\r\n              if (button === \"Add\") {\r\n                setNewContact({...newContact, email: e.target.value});\r\n              } else {\r\n                setEditedContact({...editedContact, email: e.target.value});\r\n              }\r\n            }}\r\n          />\r\n        </label>\r\n        <label className=\"PopupContact-item\">\r\n          <h3>Phone</h3>\r\n          <input\r\n            className=\"PopupContact-input\"\r\n            type=\"text\"\r\n            value={button === \"Add\" ? newContact.phone : editedContact.phone}\r\n            onChange={(e) => {\r\n              if (button === \"Add\") {\r\n                setNewContact({...newContact, phone: e.target.value});\r\n              } else {\r\n                setEditedContact({...editedContact, phone: e.target.value});\r\n              }\r\n            }}\r\n          />\r\n        </label>\r\n        <label className=\"PopupContact-item\">\r\n          <h3>Profession</h3>\r\n          <input\r\n            className=\"PopupContact-input\"\r\n            type=\"text\"\r\n            value={button === \"Add\" ? newContact.profession : editedContact.profession}\r\n            onChange={(e) => {\r\n              if (button === \"Add\") {\r\n                setNewContact({...newContact, profession: e.target.value});\r\n              } else {\r\n                setEditedContact({...editedContact, profession: e.target.value});\r\n              }\r\n            }}\r\n          />\r\n        </label>\r\n        <div className=\"PopupContact-btn-group\">\r\n          <button\r\n            className=\"PopupContact-btn\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              listItemConfirmButtonHandler(\r\n                button, contacts,\r\n                setContacts, contact,\r\n                editedContact, newContact,\r\n                setPopupContactStatus, setNewContact\r\n              )\r\n            }}\r\n          >\r\n            {button}\r\n          </button>\r\n          <button\r\n            className=\"PopupContact-btn\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              setPopupContactStatus(null);\r\n            }}\r\n          >\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","export const options = [\r\n  {\r\n    label: \"\",\r\n    value: \"\",\r\n  },\r\n  {\r\n    label: \"First Name\",\r\n    value: \"firstName\",\r\n  },\r\n  {\r\n    label: \"Last Name\",\r\n    value: \"lastName\",\r\n  },\r\n  {\r\n    label: \"Phone\",\r\n    value: \"phone\",\r\n  },\r\n  {\r\n    label: \"Email\",\r\n    value: \"email\",\r\n  },\r\n  {\r\n    label: \"Profession\",\r\n    value: \"profession\",\r\n  },\r\n];\r\n\r\nexport const contactLabel = {\r\n  \"First Name\": \"firstName\",\r\n  \"Last Name\": \"lastName\",\r\n  Phone: \"phone\",\r\n  Email: \"email\",\r\n  Profession: \"profession\",\r\n};","import \"./Search.css\";\r\nimport { options } from \"../../../../js/const\";\r\n\r\nexport default function Search({ setSearchText, setSelect }) {\r\n  const handlSearchInput = (e) => {\r\n    setSearchText(e.target.value);\r\n  };\r\n\r\n  const handleOptionChange = (e) => {\r\n    setSelect(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-box\">\r\n      <input\r\n        type=\"text\"\r\n        name=\"\"\r\n        id=\"\"\r\n        placeholder=\"Search\"\r\n        onChange={handlSearchInput}\r\n      />\r\n      <select className=\"select\" onChange={handleOptionChange}>\r\n        {options.map((option) => (\r\n          <option className=\"selectOption\" key={option.label}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import Search from \"./Search/Search\";\r\nimport \"./ListBtnSection.css\";\r\nimport { useContext } from \"react\";\r\nimport { SettingsContext } from \"../../../context/context\";\r\n\r\nexport default function ListBtnSection({\r\n  setSelect,\r\n  setSearchText,\r\n  onPopupContactAdd,\r\n  onCheck,\r\n  onDeleteChecked,\r\n  checkedIdArr,\r\n  checkAll,\r\n}) {\r\n  const { cardViewState } = useContext(SettingsContext);\r\n\r\n  return (\r\n    <div className=\"ListBtnSection\">\r\n      {cardViewState ? (\r\n        <div className=\"ListBtnSection-cardView-btn-group\">\r\n          <label className=\"checkbox ListBtnSection-checkAll\">\r\n            <input\r\n              name=\"checkAll\"\r\n              type=\"checkbox\"\r\n              checked={checkAll}\r\n              onChange={onCheck}\r\n            />\r\n            <span></span>\r\n          </label>\r\n          <button\r\n            type=\"button\"\r\n            className={\r\n              checkedIdArr.length !== 0\r\n                ? \"ListBtnSection-delete-checked-button\"\r\n                : \"ListBtnSection-delete-checked-button-disable\"\r\n            }\r\n            onClick={onDeleteChecked}\r\n          >\r\n            Delete Checked\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <button\r\n          type=\"button\"\r\n          className={\r\n            checkedIdArr.length !== 0\r\n              ? \"ListBtnSection-delete-checked-button\"\r\n              : \"ListBtnSection-delete-checked-button-disable\"\r\n          }\r\n          onClick={onDeleteChecked}\r\n        >\r\n          Delete Checked\r\n        </button>\r\n      )}\r\n      <div className=\"ListBtnSection-group\">\r\n        <Search setSearchText={setSearchText} setSelect={setSelect} />\r\n        <button\r\n          className=\"ListBtnSection-add-button\"\r\n          onClick={onPopupContactAdd}\r\n        >\r\n          Add\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./InlineContact.css\";\r\nimport {listItemConfirmButtonHandler, resetInputsHandler} from \"../../../js/utils\";\r\n\r\nimport {useState} from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faXmark} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function InlineContact({\r\n                                        contact, button, contacts, setContacts, setInlineContactStatus\r\n                                      }) {\r\n  const [editedContact, setEditedContact] = useState(contact)\r\n  const [newContact, setNewContact] = useState(contact)\r\n\r\n  return (\r\n    <form className=\"inlineContact\">\r\n      <input\r\n        className=\"InlineContact-item\"\r\n        placeholder=\"First Name\"\r\n        type=\"text\"\r\n        value={button === \"Add\" ? newContact.firstName : editedContact.firstName}\r\n        onChange={(e) => {\r\n          if (button === \"Add\") {\r\n            setNewContact({...newContact, firstName: e.target.value});\r\n          } else {\r\n            setEditedContact({...editedContact, firstName: e.target.value});\r\n          }\r\n        }}\r\n      />\r\n      <input\r\n        className=\"InlineContact-item\"\r\n        placeholder=\"Last Name\"\r\n        type=\"text\"\r\n        value={button === \"Add\" ? newContact.lastName : editedContact.lastName}\r\n        onChange={(e) => {\r\n          if (button === \"Add\") {\r\n            setNewContact({...newContact, lastName: e.target.value});\r\n          } else {\r\n            setEditedContact({...editedContact, lastName: e.target.value});\r\n          }\r\n        }}\r\n      />\r\n      <input\r\n        className=\"InlineContact-item\"\r\n        placeholder=\"Email\"\r\n        type=\"text\"\r\n        value={button === \"Add\" ? newContact.email : editedContact.email}\r\n        onChange={(e) => {\r\n          if (button === \"Add\") {\r\n            setNewContact({...newContact, email: e.target.value});\r\n          } else {\r\n            setEditedContact({...editedContact, email: e.target.value});\r\n          }\r\n        }}\r\n      />\r\n      <input\r\n        className=\"InlineContact-item\"\r\n        placeholder=\"Phone\"\r\n        type=\"text\"\r\n        value={button === \"Add\" ? newContact.phone : editedContact.phone}\r\n        onChange={(e) => {\r\n          if (button === \"Add\") {\r\n            setNewContact({...newContact, phone: e.target.value});\r\n          } else {\r\n            setEditedContact({...editedContact, phone: e.target.value});\r\n          }\r\n        }}\r\n      />\r\n      <input\r\n        className=\"InlineContact-item\"\r\n        placeholder=\"Profession\"\r\n        type=\"text\"\r\n        value={button === \"Add\" ? newContact.profession : editedContact.profession}\r\n        onChange={(e) => {\r\n          if (button === \"Add\") {\r\n            setNewContact({...newContact, profession: e.target.value});\r\n          } else {\r\n            setEditedContact({...editedContact, profession: e.target.value});\r\n          }\r\n        }}\r\n      />\r\n      <div className=\"InlineContact-btn-group\">\r\n        <FontAwesomeIcon\r\n          icon={faCheck}\r\n          className=\"InlineContact-btn\"\r\n          type=\"button\"\r\n          onClick={() => {\r\n            listItemConfirmButtonHandler(\r\n              button, contacts,\r\n              setContacts, contact,\r\n              editedContact, newContact,\r\n              setInlineContactStatus, setNewContact)\r\n          }}\r\n        />\r\n        <FontAwesomeIcon\r\n          icon={faXmark}\r\n          className=\"InlineContact-btn\"\r\n          type=\"button\"\r\n          onClick={() => {\r\n            if (button === \"Save\") {\r\n              setInlineContactStatus(null);\r\n            } else if (button === \"Add\") {\r\n              resetInputsHandler(setNewContact)\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n    </form>\r\n  )\r\n}","import \"./List.css\";\r\nimport Caption from \"../../shared/Caption/Caption\";\r\nimport ListHeader from \"./ListHeader/ListHeader\";\r\nimport ListItem from \"./ListItem/ListItem\";\r\nimport PopupContact from \"./PopupContact/PopupContact\";\r\nimport ListBtnSection from \"./ListBtnSection/ListBtnSection\";\r\nimport InlineContact from \"./InlineContact/InlineContact\";\r\nimport Loader from \"../../shared/Loader/Loader\";\r\n\r\nimport { popupConfirm, popupInfo } from \"../../js/utils\";\r\nimport axios from \"../../js/axiosInstance\";\r\n\r\nimport { useState } from \"react\";\r\nimport { contactLabel } from \"../../js/const\";\r\nimport { useContext } from \"react\";\r\nimport { SettingsContext } from \"../../context/context\";\r\n\r\nexport default function List({ isLoading, contacts, setContacts }) {\r\n  const [popupContactStatus, setPopupContactStatus] = useState(null);\r\n  const [inlineContactStatus, setInlineContactStatus] = useState(null);\r\n  const [checkAll, setCheckAll] = useState(false);\r\n  const [checkedIdArr, setCheckedIdArr] = useState([]);\r\n  const checkedIdCopy = [...checkedIdArr];\r\n  const [newContact, setNewContact] = useState({});\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [select, setSelect] = useState(\"\");\r\n  const { cardViewState, inlineAddState } = useContext(SettingsContext);\r\n\r\n  const onCheck = (e, id) => {\r\n    const { name } = e.target;\r\n    if (name === \"checkAll\") {\r\n      if (e.target.checked) {\r\n        setCheckAll(true);\r\n        const notCheckedContacts = contacts.filter(\r\n          (contact) => !checkedIdCopy.includes(contact.id)\r\n        );\r\n        notCheckedContacts.map((contact) => checkedIdCopy.push(contact.id));\r\n        setCheckedIdArr(checkedIdCopy);\r\n      } else {\r\n        setCheckAll(false);\r\n        setCheckedIdArr([]);\r\n      }\r\n    } else if (name === \"checkItem\") {\r\n      if (e.target.checked) {\r\n        checkedIdCopy.push(id);\r\n        setCheckedIdArr(checkedIdCopy);\r\n        if (checkedIdCopy.length === contacts.length) {\r\n          setCheckAll(true);\r\n        }\r\n      } else {\r\n        setCheckAll(false);\r\n        setCheckedIdArr(checkedIdCopy.filter((checkedId) => checkedId !== id));\r\n      }\r\n    }\r\n  };\r\n\r\n  const onDeleteChecked = async () => {\r\n    if (checkedIdArr.length !== 0) {\r\n      await popupConfirm(\r\n        \"Do you want to delete these contacts?\",\r\n        \"Yes, delete these contacts!\"\r\n      ).then((result) => {\r\n        if (result.isConfirmed) {\r\n          checkedIdArr.map((id) => axios.delete(`contacts/${id}`));\r\n          popupInfo(\"success\", \"Contacts has been deleted!\");\r\n          setContacts(\r\n            contacts.filter((contact) => !checkedIdArr.includes(contact.id))\r\n          );\r\n          setCheckedIdArr([]);\r\n          setCheckAll(false);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const onPopupContactEdit = (contact) => {\r\n    setPopupContactStatus(\r\n      <PopupContact\r\n        title={\"Edit Contact\"}\r\n        button={\"Save\"}\r\n        contact={contact}\r\n        contacts={contacts}\r\n        setContacts={setContacts}\r\n        setPopupContactStatus={setPopupContactStatus}\r\n      />\r\n    );\r\n  };\r\n\r\n  const onPopupContactAdd = () => {\r\n    setPopupContactStatus(\r\n      <PopupContact\r\n        title={\"Add Contact\"}\r\n        button={\"Add\"}\r\n        contacts={contacts}\r\n        setContacts={setContacts}\r\n        setPopupContactStatus={setPopupContactStatus}\r\n        contact={{\r\n          firstName: \"\",\r\n          lastName: \"\",\r\n          phone: \"\",\r\n          email: \"\",\r\n          profession: \"\",\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  const onInlineContactEdit = (contact) => {\r\n    setInlineContactStatus(\r\n      <InlineContact title={\"Edit Contact\"} button={\"Save\"} contact={contact} />\r\n    );\r\n  };\r\n\r\n  const handleSearch = (contact) => {\r\n    if (select !== \"\") {\r\n      if (contact[contactLabel[select]].toLowerCase().includes(searchText)) {\r\n        return contact;\r\n      }\r\n    } else {\r\n      if (\r\n        Object.keys(contact).some((key) =>\r\n          contact[key].toLowerCase().includes(searchText)\r\n        )\r\n      ) {\r\n        return contact;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"ListCaption\">\r\n        <Caption title={\"Contacts\"} />\r\n      </div>\r\n      {inlineAddState && (\r\n        <div className=\"InlineAdd\">\r\n          <InlineContact\r\n            title={\"Add Contact\"}\r\n            button={\"Add\"}\r\n            contacts={contacts}\r\n            setContacts={setContacts}\r\n            setInlineContactStatus={setInlineContactStatus}\r\n            contact={{\r\n              firstName: \"\",\r\n              lastName: \"\",\r\n              phone: \"\",\r\n              email: \"\",\r\n              profession: \"\",\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n      {isLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <div className=\"List\">\r\n          {popupContactStatus ? popupContactStatus : null}\r\n          <div className=\"ListBtnSection-container\">\r\n            <ListBtnSection\r\n              setSelect={setSelect}\r\n              setSearchText={setSearchText}\r\n              onPopupContactAdd={onPopupContactAdd}\r\n              onCheck={onCheck}\r\n              onDeleteChecked={onDeleteChecked}\r\n              checkedIdArr={checkedIdArr}\r\n              checkAll={checkAll}\r\n            />\r\n          </div>\r\n          {!cardViewState ? (\r\n            <ListHeader onCheck={onCheck} checkAll={checkAll} />\r\n          ) : null}\r\n          <div\r\n            className={cardViewState ? \"ListItem-cardView\" : \"ListItem-rowView\"}\r\n          >\r\n            {contacts.map((contact) => {\r\n              if (handleSearch(contact)) {\r\n                return inlineContactStatus && contact.id === newContact.id ? (\r\n                  <div className=\"InlineEditItem\" key={contact.id}>\r\n                    <InlineContact\r\n                      button={\"Save\"}\r\n                      contact={contact}\r\n                      contacts={contacts}\r\n                      setContacts={setContacts}\r\n                      setInlineContactStatus={setInlineContactStatus}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <ListItem\r\n                    key={contact.id}\r\n                    id={contact.id}\r\n                    contact={contact}\r\n                    contacts={contacts}\r\n                    setContacts={setContacts}\r\n                    setNewContact={setNewContact}\r\n                    checkedIdArr={checkedIdArr}\r\n                    onPopupContactEdit={onPopupContactEdit}\r\n                    onInlineContactEdit={onInlineContactEdit}\r\n                    onCheck={onCheck}\r\n                  />\r\n                );\r\n              }\r\n            })}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"names":["ListHeader","onCheck","checkAll","className","name","type","checked","onChange","ListItem","id","contact","contacts","setContacts","setNewContact","checkedIdArr","onPopupContactEdit","onInlineContactEdit","useContext","SettingsContext","cardViewState","inlineEditState","includes","e","avatar","firstName","lastName","href","email","phone","profession","icon","faUserPen","onClick","faMinus","onDelete","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","PopupContact","title","button","setPopupContactStatus","useState","editedContact","setEditedContact","newContact","listItemConfirmButtonHandler","options","label","contactLabel","Phone","Email","Profession","Search","setSearchText","setSelect","placeholder","map","option","ListBtnSection","onPopupContactAdd","onDeleteChecked","InlineContact","setInlineContactStatus","faCheck","faXmark","resetInputsHandler","List","isLoading","popupContactStatus","inlineContactStatus","setCheckAll","setCheckedIdArr","checkedIdCopy","searchText","select","inlineAddState","checkedId","popupConfirm","then","result","isConfirmed","axios","popupInfo","Caption","Loader","toLowerCase","some","handleSearch"],"sourceRoot":""}