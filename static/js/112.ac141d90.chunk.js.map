{"version":3,"file":"static/js/112.ac141d90.chunk.js","mappings":"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","sources":["pages/List/ListHeader/ListHeader.jsx","pages/List/ListItem/ListItem.jsx","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","pages/List/PopupContact/PopupContact.jsx","pages/List/ListBtnSection/ListBtnSection.jsx","pages/List/InlineContact/InlineContact.jsx","pages/List/List.jsx"],"sourcesContent":["import \"./ListHeader.css\";\r\n\r\nexport default function ListHeader({ onCheck, checkAll }) {\r\n  return (\r\n    <div className=\"ListHeader\">\r\n      <div className=\"ListHeader-row\">\r\n        <div className=\"ListHeader-item\">\r\n          <label className=\"checkbox\">\r\n            <input\r\n              name=\"checkAll\"\r\n              type=\"checkbox\"\r\n              checked={checkAll}\r\n              onChange={onCheck}\r\n            />\r\n            <span></span>\r\n          </label>\r\n        </div>\r\n        <div className=\"ListHeader-item row-item-2 row-item\">NAME</div>\r\n        <div className=\"ListHeader-item row-item-3 row-item\">EMAIL</div>\r\n        <div className=\"ListHeader-item row-item-4 row-item\">PHONE</div>\r\n        <div className=\"ListHeader-item row-item-5 row-item\">PROFESSION</div>\r\n        <div className=\"ListHeader-item row-item-6 row-item\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./ListItem.css\";\r\nimport {onDelete} from \"../../../js/utils\";\r\n\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faMinus, faUserPen} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function ListItem({\r\n                                   id,\r\n                                   contact,\r\n                                   contacts,\r\n                                   setContacts,\r\n                                   setNewContact,\r\n                                   cardViewState,\r\n                                   inlineEditState,\r\n                                   checkedIdArr,\r\n                                   onPopupContactEdit,\r\n                                   onInlineContactEdit,\r\n                                   onCheck,\r\n                                 }) {\r\n\r\n  const ListItemStyleHandler = () => {\r\n    if (cardViewState) {\r\n      return \"ListItem-card\";\r\n    } else {\r\n      if (checkedIdArr.includes(id)) {\r\n        return \"ListItem-row itemRowInlineStyle\";\r\n      } else {\r\n        return \"ListItem-row\";\r\n      }\r\n    }\r\n  };\r\n\r\n  const editItemHandler = () => {\r\n    setNewContact({\r\n      id: contact.id,\r\n      firstName: contact.firstName,\r\n      lastName: contact.lastName,\r\n      phone: contact.phone,\r\n      email: contact.email,\r\n      profession: contact.profession,\r\n    })\r\n    if (!inlineEditState) {\r\n      onPopupContactEdit(contact);\r\n    } else {\r\n      if (!cardViewState) {\r\n        onInlineContactEdit(contact);\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={ListItemStyleHandler()}>\r\n      <div className={!cardViewState ? \"ListItem-item\" : \"ListItem-card-item\"}>\r\n        <label className=\"checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            name=\"checkItem\"\r\n            checked={checkedIdArr.includes(id)}\r\n            onChange={(e) => {\r\n              onCheck(e, id);\r\n            }}\r\n          />\r\n          <span></span>\r\n        </label>\r\n      </div>\r\n\r\n      <div className={!cardViewState ? \"ListItem-item row-item-2 row-item\" : \"ListItem-card-item\"}>\r\n        {contact.avatar}\r\n        {contact.firstName} {contact.lastName}\r\n      </div>\r\n      <div className={!cardViewState ? \"ListItem-item row-item-3 row-item\" : \"ListItem-card-item\"}>\r\n        {cardViewState ? (<p className=\"ListItem-carView-subtitle\">Email</p>) : null}\r\n        <a href={`mailto:${contact.email}`}>{contact.email}</a>\r\n      </div>\r\n      <div className={!cardViewState ? \"ListItem-item row-item-4 row-item\" : \"ListItem-card-item\"}>\r\n        {cardViewState ? (<p className=\"ListItem-carView-subtitle\">Phone</p>) : null}\r\n        <a href={`tel:${contact.phone}`}>{contact.phone} </a>\r\n      </div>\r\n      <div className={!cardViewState ? \"ListItem-item row-item-5 row-item\" : \"ListItem-card-item\"}>\r\n        {cardViewState ? (<p className=\"ListItem-carView-subtitle\">Profession</p>) : null}\r\n        {contact.profession}\r\n      </div>\r\n      <div className={!cardViewState ? \"ListItem-item row-item-6 row-item\" : \"ListItem-card-item\"}>\r\n        <div className=\"ListItem-icon-group\">\r\n          <FontAwesomeIcon\r\n            icon={faUserPen}\r\n            onClick={editItemHandler}\r\n          />\r\n          <FontAwesomeIcon\r\n            icon={faMinus}\r\n            onClick={() => {\r\n              onDelete(contact, contacts, setContacts,);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>);\r\n}\r\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","import \"./PopupContact.css\";\r\nimport {listItemConfirmButtonHandler} from \"../../../js/utils\";\r\n\r\nimport {useState} from \"react\";\r\n\r\nexport default function PopupContact({\r\n                                       title,\r\n                                       button,\r\n                                       contact,\r\n                                       contacts,\r\n                                       setContacts,\r\n                                       setPopupContactStatus,\r\n                                     }) {\r\n  const [editedContact, setEditedContact] = useState(contact)\r\n  const [newContact, setNewContact] = useState(contact)\r\n\r\n  return (\r\n    <div\r\n      className=\"PopupContact-mask\"\r\n      onClick={(e) => {\r\n        if (e.target.className === \"PopupContact-mask\") {\r\n          setPopupContactStatus(null);\r\n        }\r\n      }}\r\n    >\r\n      <form className=\"PopupContact-container swal2-show\">\r\n        <h1 className=\"PopupContact-title\">{title}</h1>\r\n        <label className=\"PopupContact-item\">\r\n          <h3>First Name</h3>\r\n          <input\r\n            className=\"PopupContact-input\"\r\n            type=\"text\"\r\n            value={button === \"Add\" ? newContact.firstName : editedContact.firstName}\r\n            onChange={(e) => {\r\n              if (button === \"Add\") {\r\n                setNewContact({...newContact, firstName: e.target.value});\r\n              } else {\r\n                setEditedContact({...editedContact, firstName: e.target.value});\r\n              }\r\n            }}\r\n          />\r\n        </label>\r\n        <label className=\"PopupContact-item\">\r\n          <h3>Last Name</h3>\r\n          <input\r\n            className=\"PopupContact-input\"\r\n            type=\"text\"\r\n            value={button === \"Add\" ? newContact.lastName : editedContact.lastName}\r\n            onChange={(e) => {\r\n              if (button === \"Add\") {\r\n                setNewContact({...newContact, lastName: e.target.value});\r\n              } else {\r\n                setEditedContact({...editedContact, lastName: e.target.value});\r\n              }\r\n            }}\r\n          />\r\n        </label>\r\n        <label className=\"PopupContact-item\">\r\n          <h3>Email</h3>\r\n          <input\r\n            className=\"PopupContact-input\"\r\n            type=\"text\"\r\n            value={button === \"Add\" ? newContact.email : editedContact.email}\r\n            onChange={(e) => {\r\n              if (button === \"Add\") {\r\n                setNewContact({...newContact, email: e.target.value});\r\n              } else {\r\n                setEditedContact({...editedContact, email: e.target.value});\r\n              }\r\n            }}\r\n          />\r\n        </label>\r\n        <label className=\"PopupContact-item\">\r\n          <h3>Phone</h3>\r\n          <input\r\n            className=\"PopupContact-input\"\r\n            type=\"text\"\r\n            value={button === \"Add\" ? newContact.phone : editedContact.phone}\r\n            onChange={(e) => {\r\n              if (button === \"Add\") {\r\n                setNewContact({...newContact, phone: e.target.value});\r\n              } else {\r\n                setEditedContact({...editedContact, phone: e.target.value});\r\n              }\r\n            }}\r\n          />\r\n        </label>\r\n        <label className=\"PopupContact-item\">\r\n          <h3>Profession</h3>\r\n          <input\r\n            className=\"PopupContact-input\"\r\n            type=\"text\"\r\n            value={button === \"Add\" ? newContact.profession : editedContact.profession}\r\n            onChange={(e) => {\r\n              if (button === \"Add\") {\r\n                setNewContact({...newContact, profession: e.target.value});\r\n              } else {\r\n                setEditedContact({...editedContact, profession: e.target.value});\r\n              }\r\n            }}\r\n          />\r\n        </label>\r\n        <div className=\"PopupContact-btn-group\">\r\n          <button\r\n            className=\"PopupContact-btn\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              listItemConfirmButtonHandler(\r\n                button, contacts,\r\n                setContacts, contact,\r\n                editedContact, newContact,\r\n                setPopupContactStatus, setNewContact\r\n              )\r\n            }}\r\n          >\r\n            {button}\r\n          </button>\r\n          <button\r\n            className=\"PopupContact-btn\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              setPopupContactStatus(null);\r\n            }}\r\n          >\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import \"./ListBtnSection.css\";\r\n\r\nexport default function ListBtnSection({\r\n   onPopupContactAdd, onCheck, onDeleteChecked, checkedIdArr, checkAll, cardViewState,\r\n}) {\r\n  return (<div className=\"ListBtnSection\">\r\n    {cardViewState ? (<div className=\"ListBtnSection-cardView-btn-group\">\r\n      <label className=\"checkbox ListBtnSection-checkAll\">\r\n        <input\r\n          name=\"checkAll\"\r\n          type=\"checkbox\"\r\n          checked={checkAll}\r\n          onChange={onCheck}\r\n        />\r\n        <span></span>\r\n      </label>\r\n      <button\r\n        type=\"button\"\r\n        className={checkedIdArr.length !== 0 ? \"ListBtnSection-delete-checked-button\" : \"ListBtnSection-delete-checked-button-disable\"}\r\n        onClick={onDeleteChecked}>\r\n        Delete Checked\r\n      </button>\r\n    </div>) : (<button\r\n      type=\"button\"\r\n      className={checkedIdArr.length !== 0 ? \"ListBtnSection-delete-checked-button\" : \"ListBtnSection-delete-checked-button-disable\"}\r\n      onClick={onDeleteChecked}>\r\n      Delete Checked\r\n    </button>)}\r\n    <button className=\"ListBtnSection-add-button\" onClick={onPopupContactAdd}>\r\n      Add\r\n    </button>\r\n  </div>);\r\n}\r\n","import \"./InlineContact.css\";\r\nimport {listItemConfirmButtonHandler, resetInputsHandler} from \"../../../js/utils\";\r\n\r\nimport {useState} from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faXmark} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function InlineContact({\r\n                                        contact, button, contacts, setContacts, setInlineContactStatus\r\n                                      }) {\r\n  const [editedContact, setEditedContact] = useState(contact)\r\n  const [newContact, setNewContact] = useState(contact)\r\n\r\n  return (\r\n    <form className=\"inlineContact\">\r\n      <input\r\n        className=\"InlineContact-item\"\r\n        placeholder=\"First Name\"\r\n        type=\"text\"\r\n        value={button === \"Add\" ? newContact.firstName : editedContact.firstName}\r\n        onChange={(e) => {\r\n          if (button === \"Add\") {\r\n            setNewContact({...newContact, firstName: e.target.value});\r\n          } else {\r\n            setEditedContact({...editedContact, firstName: e.target.value});\r\n          }\r\n        }}\r\n      />\r\n      <input\r\n        className=\"InlineContact-item\"\r\n        placeholder=\"Last Name\"\r\n        type=\"text\"\r\n        value={button === \"Add\" ? newContact.lastName : editedContact.lastName}\r\n        onChange={(e) => {\r\n          if (button === \"Add\") {\r\n            setNewContact({...newContact, lastName: e.target.value});\r\n          } else {\r\n            setEditedContact({...editedContact, lastName: e.target.value});\r\n          }\r\n        }}\r\n      />\r\n      <input\r\n        className=\"InlineContact-item\"\r\n        placeholder=\"Email\"\r\n        type=\"text\"\r\n        value={button === \"Add\" ? newContact.email : editedContact.email}\r\n        onChange={(e) => {\r\n          if (button === \"Add\") {\r\n            setNewContact({...newContact, email: e.target.value});\r\n          } else {\r\n            setEditedContact({...editedContact, email: e.target.value});\r\n          }\r\n        }}\r\n      />\r\n      <input\r\n        className=\"InlineContact-item\"\r\n        placeholder=\"Phone\"\r\n        type=\"text\"\r\n        value={button === \"Add\" ? newContact.phone : editedContact.phone}\r\n        onChange={(e) => {\r\n          if (button === \"Add\") {\r\n            setNewContact({...newContact, phone: e.target.value});\r\n          } else {\r\n            setEditedContact({...editedContact, phone: e.target.value});\r\n          }\r\n        }}\r\n      />\r\n      <input\r\n        className=\"InlineContact-item\"\r\n        placeholder=\"Profession\"\r\n        type=\"text\"\r\n        value={button === \"Add\" ? newContact.profession : editedContact.profession}\r\n        onChange={(e) => {\r\n          if (button === \"Add\") {\r\n            setNewContact({...newContact, profession: e.target.value});\r\n          } else {\r\n            setEditedContact({...editedContact, profession: e.target.value});\r\n          }\r\n        }}\r\n      />\r\n      <div className=\"InlineContact-btn-group\">\r\n        <FontAwesomeIcon\r\n          icon={faCheck}\r\n          className=\"InlineContact-btn\"\r\n          type=\"button\"\r\n          onClick={() => {\r\n            listItemConfirmButtonHandler(\r\n              button, contacts,\r\n              setContacts, contact,\r\n              editedContact, newContact,\r\n              setInlineContactStatus, setNewContact)\r\n          }}\r\n        />\r\n        <FontAwesomeIcon\r\n          icon={faXmark}\r\n          className=\"InlineContact-btn\"\r\n          type=\"button\"\r\n          onClick={() => {\r\n            if (button === \"Save\") {\r\n              setInlineContactStatus(null);\r\n            } else if (button === \"Add\") {\r\n              resetInputsHandler(setNewContact)\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n    </form>\r\n  )\r\n}","import \"./List.css\";\r\nimport Caption from \"../../components/Caption/Caption\";\r\nimport ListHeader from \"./ListHeader/ListHeader\";\r\nimport ListItem from \"./ListItem/ListItem\";\r\nimport PopupContact from \"./PopupContact/PopupContact\";\r\nimport ListBtnSection from \"./ListBtnSection/ListBtnSection\";\r\nimport InlineContact from \"./InlineContact/InlineContact\";\r\n\r\nimport {onDelete, popupConfirm, popupInfo} from \"../../js/utils\";\r\nimport axios from \"../../js/axiosInstance\";\r\n\r\nimport {useState} from \"react\";\r\n\r\nexport default function List({\r\n                               contacts,\r\n                               setContacts,\r\n                               cardViewState,\r\n                               inlineEditState,\r\n                               inlineAddState,\r\n                             }) {\r\n  const [popupContactStatus, setPopupContactStatus] = useState(null);\r\n  const [inlineContactStatus, setInlineContactStatus] = useState(null);\r\n  const [checkAll, setCheckAll] = useState(false);\r\n  const [checkedIdArr, setCheckedIdArr] = useState([]);\r\n  const checkedIdCopy = [...checkedIdArr];\r\n\r\n  const [newContact, setNewContact] = useState({})\r\n\r\n\r\n  const onCheck = (e, id) => {\r\n    const {name} = e.target;\r\n    if (name === \"checkAll\") {\r\n      if (e.target.checked) {\r\n        setCheckAll(true);\r\n        const notCheckedContacts = contacts.filter(contact => !checkedIdCopy.includes(contact.id))\r\n        notCheckedContacts.map(contact => checkedIdCopy.push(contact.id))\r\n        setCheckedIdArr(checkedIdCopy);\r\n      } else {\r\n        setCheckAll(false);\r\n        setCheckedIdArr([]);\r\n      }\r\n    } else if (name === \"checkItem\") {\r\n      if (e.target.checked) {\r\n        checkedIdCopy.push(id);\r\n        setCheckedIdArr(checkedIdCopy);\r\n        if (checkedIdCopy.length === contacts.length) {\r\n          setCheckAll(true);\r\n        }\r\n      } else {\r\n        setCheckAll(false);\r\n        setCheckedIdArr(checkedIdCopy.filter((checkedId) => checkedId !== id));\r\n      }\r\n    }\r\n  };\r\n\r\n  const onDeleteChecked = async () => {\r\n    if (checkedIdArr.length !== 0) {\r\n      await popupConfirm(\"Do you want to delete these contacts?\", \"Yes, delete these contacts!\")\r\n        .then((result) => {\r\n          if (result.isConfirmed) {\r\n            checkedIdArr.map(id => axios.delete(`contacts/${id}`))\r\n            popupInfo(\"success\", \"Contacts has been deleted!\")\r\n            setContacts(\r\n              contacts.filter((contact) => !checkedIdArr.includes(contact.id))\r\n            );\r\n            setCheckedIdArr([]);\r\n            setCheckAll(false);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  const onPopupContactEdit = (contact) => {\r\n    setPopupContactStatus(\r\n      <PopupContact\r\n        title={\"Edit Contact\"}\r\n        button={\"Save\"}\r\n        contact={contact}\r\n        contacts={contacts}\r\n        setContacts={setContacts}\r\n        setPopupContactStatus={setPopupContactStatus}\r\n      />\r\n    );\r\n  };\r\n\r\n  const onPopupContactAdd = () => {\r\n    setPopupContactStatus(\r\n      <PopupContact\r\n        title={\"Add Contact\"}\r\n        button={\"Add\"}\r\n        contacts={contacts}\r\n        setContacts={setContacts}\r\n        setPopupContactStatus={setPopupContactStatus}\r\n        contact={{\r\n          firstName: \"\",\r\n          lastName: \"\",\r\n          phone: \"\",\r\n          email: \"\",\r\n          profession: \"\",\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  const onInlineContactEdit = (contact) => {\r\n    setInlineContactStatus(\r\n      <InlineContact\r\n        title={\"Edit Contact\"}\r\n        button={\"Save\"}\r\n        contact={contact}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"ListCaption\">\r\n        <Caption title={\"Contacts\"}/>\r\n      </div>\r\n      {inlineAddState &&\r\n        <div className=\"InlineAdd\">\r\n          <InlineContact\r\n            title={\"Add Contact\"}\r\n            button={\"Add\"}\r\n            contacts={contacts}\r\n            setContacts={setContacts}\r\n            setInlineContactStatus={setInlineContactStatus}\r\n            contact={{\r\n              firstName: \"\",\r\n              lastName: \"\",\r\n              phone: \"\",\r\n              email: \"\",\r\n              profession: \"\",\r\n            }}\r\n          />\r\n        </div>\r\n      }\r\n\r\n      <div className=\"List\">\r\n        {popupContactStatus ? popupContactStatus : null}\r\n        <div className=\"ListBtnSection-container\">\r\n          <ListBtnSection\r\n            onPopupContactAdd={onPopupContactAdd}\r\n            onCheck={onCheck}\r\n            onDeleteChecked={onDeleteChecked}\r\n            checkedIdArr={checkedIdArr}\r\n            checkAll={checkAll}\r\n            cardViewState={cardViewState}\r\n          />\r\n        </div>\r\n        {!cardViewState ? (\r\n          <ListHeader onCheck={onCheck} checkAll={checkAll}/>\r\n        ) : null}\r\n        <div\r\n          className={cardViewState ? \"ListItem-cardView\" : \"ListItem-rowView\"}\r\n        >\r\n\r\n          {contacts.map((contact) => {\r\n            return inlineContactStatus && contact.id === newContact.id ?\r\n              <div className=\"InlineEditItem\" key={contact.id}>\r\n                <InlineContact\r\n                  button={\"Save\"}\r\n                  contact={contact}\r\n                  contacts={contacts}\r\n                  setContacts={setContacts}\r\n                  setInlineContactStatus={setInlineContactStatus}\r\n                />\r\n              </div>\r\n              : (\r\n                <ListItem\r\n                  key={contact.id}\r\n                  id={contact.id}\r\n                  contact={contact}\r\n                  contacts={contacts}\r\n                  setContacts={setContacts}\r\n                  setNewContact={setNewContact}\r\n                  cardViewState={cardViewState}\r\n                  inlineEditState={inlineEditState}\r\n                  checkedIdArr={checkedIdArr}\r\n                  onPopupContactEdit={onPopupContactEdit}\r\n                  onInlineContactEdit={onInlineContactEdit}\r\n                  onCheck={onCheck}\r\n                />\r\n              );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"names":["ListHeader","onCheck","checkAll","className","name","type","checked","onChange","ListItem","id","contact","contacts","setContacts","setNewContact","cardViewState","inlineEditState","checkedIdArr","onPopupContactEdit","onInlineContactEdit","includes","e","avatar","firstName","lastName","href","email","phone","profession","icon","faUserPen","onClick","faMinus","onDelete","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","PopupContact","title","button","setPopupContactStatus","useState","editedContact","setEditedContact","newContact","listItemConfirmButtonHandler","ListBtnSection","onPopupContactAdd","onDeleteChecked","InlineContact","setInlineContactStatus","placeholder","faCheck","faXmark","resetInputsHandler","List","inlineAddState","popupContactStatus","inlineContactStatus","setCheckAll","setCheckedIdArr","checkedIdCopy","map","checkedId","popupConfirm","then","result","isConfirmed","axios","popupInfo","Caption"],"sourceRoot":""}